[{"name":"app.R","content":"# Load required packages\r\nlibrary(shiny)\r\nlibrary(ggplot2)\r\nlibrary(plotly)\r\nlibrary(DT)\r\nlibrary(shinyWidgets)\r\nlibrary(reshape2)\r\nlibrary(zip)\r\n\r\n# Load historical data (replace with actual data as needed)\r\nhistorical_data <- data.frame(\r\n  Year = rep(c(\"2021-2022\", \"2022-2023\"), each = 4),\r\n  Category = rep(c(\"Below 100K\", \"100K_500K\", \"500K_1M\", \"Above 1M\"), times = 2),\r\n  NumSuccessfulProjects = c(16, 6, 1, 1, 21, 3, 2, 2),\r\n  SuccessRatePercent = c(47, 33, 25, 100, 39, 14, 40, 25),\r\n  TotalAmountSecured = c(300000, 1300000, 600000, 1200000, 380000, 600000, 1400000, 3500000),\r\n  stringsAsFactors = FALSE\r\n)\r\n\r\n# Define UI\r\nui <- fluidPage(\r\n  titlePanel(\"Financial Scenario Modeling for Grant Projects\"),\r\n  \r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      h3(\"Input Parameters\"),\r\n      numericInput(\"cost_per_hour\", \"Cost per Hour (£):\", value = 50, min = 0),\r\n      tabsetPanel(\r\n        tabPanel(\"Below £100K\",\r\n                 numericInput(\"num_success_below100k\", \"Number of Successful Projects:\", value = 21, min = 0),\r\n                 sliderInput(\"success_rate_below100k\", \"Success Rate (%):\", min = 0, max = 100, value = 39),\r\n                 numericInput(\"total_amount_below100k\", \"Total Amount Secured (£):\", value = 386236, min = 0),\r\n                 numericInput(\"hours_per_project_below100k\", \"Hours per Project:\", value = 40, min = 0)\r\n        ),\r\n        tabPanel(\"£100K–£500K\",\r\n                 numericInput(\"num_success_100k_500k\", \"Number of Successful Projects:\", value = 3, min = 0),\r\n                 sliderInput(\"success_rate_100k_500k\", \"Success Rate (%):\", min = 0, max = 100, value = 14),\r\n                 numericInput(\"total_amount_100k_500k\", \"Total Amount Secured (£):\", value = 598292, min = 0),\r\n                 numericInput(\"hours_per_project_100k_500k\", \"Hours per Project:\", value = 44, min = 0)\r\n        ),\r\n        tabPanel(\"£500K–£1M\",\r\n                 numericInput(\"num_success_500k_1m\", \"Number of Successful Projects:\", value = 2, min = 0),\r\n                 sliderInput(\"success_rate_500k_1m\", \"Success Rate (%):\", min = 0, max = 100, value = 40),\r\n                 numericInput(\"total_amount_500k_1m\", \"Total Amount Secured (£):\", value = 1498418, min = 0),\r\n                 numericInput(\"hours_per_project_500k_1m\", \"Hours per Project:\", value = 48, min = 0)\r\n        ),\r\n        tabPanel(\"Above £1M\",\r\n                 numericInput(\"num_success_above1m\", \"Number of Successful Projects:\", value = 2, min = 0),\r\n                 sliderInput(\"success_rate_above1m\", \"Success Rate (%):\", min = 0, max = 100, value = 25),\r\n                 numericInput(\"total_amount_above1m\", \"Total Amount Secured (£):\", value = 3587773, min = 0),\r\n                 numericInput(\"hours_per_project_above1m\", \"Hours per Project:\", value = 52, min = 0)\r\n        )\r\n      ),\r\n      actionButton(\"run_analysis\", \"Run Analysis\"),\r\n      hr(),\r\n      h3(\"Export Options\"),\r\n      downloadButton(\"download_data\", \"Download Results Table\"),\r\n      downloadButton(\"download_plot\", \"Download Plots\")\r\n    ),\r\n    \r\n    mainPanel(\r\n      h3(\"Analysis Results\"),\r\n      DTOutput(\"results_table\"),\r\n      br(),\r\n      h4(\"Visualizations\"),\r\n      tabsetPanel(\r\n        tabPanel(\"Amount per Hour\",\r\n                 plotlyOutput(\"amount_per_hour_plot\")\r\n        ),\r\n        tabPanel(\"ROI Percentage\",\r\n                 plotlyOutput(\"roi_plot\")\r\n        ),\r\n        tabPanel(\"Cost-Benefit Ratio\",\r\n                 plotlyOutput(\"cost_benefit_plot\")\r\n        ),\r\n        tabPanel(\"Historical Comparison\",\r\n                 selectInput(\"select_year\", \"Select Year for Comparison:\", choices = unique(historical_data$Year)),\r\n                 plotlyOutput(\"historical_plot\")\r\n        )\r\n      ),\r\n      br(),\r\n      h4(\"Key Financial Metrics\"),\r\n      fluidRow(\r\n        column(4, strong(\"Total Amount Secured:\"), textOutput(\"total_amount_secured\")),\r\n        column(4, strong(\"Total Costs:\"), textOutput(\"total_costs\")),\r\n        column(4, strong(\"Total Hours Invested:\"), textOutput(\"total_hours_invested\"))\r\n      ),\r\n      fluidRow(\r\n        column(4, strong(\"Overall Amount Secured per Hour:\"), textOutput(\"overall_amount_per_hour\")),\r\n        column(4, strong(\"Overall ROI (%):\"), textOutput(\"overall_roi\")),\r\n        column(4, strong(\"Overall Cost-Benefit Ratio:\"), textOutput(\"overall_cost_benefit\"))\r\n      )\r\n    )\r\n  )\r\n)\r\n\r\n# Define Server\r\nserver <- function(input, output) {\r\n  \r\n  # Reactive expression to store the results\r\n  results <- reactive({\r\n    req(input$num_success_below100k, input$success_rate_below100k)\r\n    \r\n    categories <- c(\"Below 100K\", \"100K_500K\", \"500K_1M\", \"Above 1M\")\r\n    \r\n    num_success <- c(input$num_success_below100k,\r\n                     input$num_success_100k_500k,\r\n                     input$num_success_500k_1m,\r\n                     input$num_success_above1m)\r\n    \r\n    success_rate <- c(input$success_rate_below100k,\r\n                      input$success_rate_100k_500k,\r\n                      input$success_rate_500k_1m,\r\n                      input$success_rate_above1m) / 100  # Convert to decimal\r\n    \r\n    total_amount_secured <- c(input$total_amount_below100k,\r\n                              input$total_amount_100k_500k,\r\n                              input$total_amount_500k_1m,\r\n                              input$total_amount_above1m)\r\n    \r\n    hours_per_project <- c(input$hours_per_project_below100k,\r\n                           input$hours_per_project_100k_500k,\r\n                           input$hours_per_project_500k_1m,\r\n                           input$hours_per_project_above1m)\r\n    \r\n    # Handle cases where success rate is zero to avoid division by zero\r\n    num_applications <- ifelse(success_rate > 0, num_success / success_rate, 0)\r\n    \r\n    # Calculate total hours invested\r\n    total_hours_invested <- num_applications * hours_per_project\r\n    \r\n    # Calculate total costs\r\n    cost_per_hour <- input$cost_per_hour\r\n    total_costs <- total_hours_invested * cost_per_hour\r\n    \r\n    # Calculate amount secured per hour, handle zero total hours invested\r\n    amount_secured_per_hour <- ifelse(total_hours_invested > 0, total_amount_secured / total_hours_invested, 0)\r\n    \r\n    # Calculate ROI percentages, handle zero total costs\r\n    roi_percentage <- ifelse(total_costs > 0, ((total_amount_secured - total_costs) / total_costs) * 100, 0)\r\n    \r\n    # Calculate cost-benefit ratios, handle zero total costs\r\n    cost_benefit_ratio <- ifelse(total_costs > 0, total_amount_secured / total_costs, 0)\r\n    \r\n    # Create data frame with R-friendly column names\r\n    data.frame(\r\n      Category = categories,\r\n      NumSuccessfulProjects = num_success,\r\n      SuccessRatePercent = success_rate * 100,\r\n      NumApplications = round(num_applications, 2),\r\n      HoursPerProject = hours_per_project,\r\n      TotalHoursInvested = round(total_hours_invested, 2),\r\n      TotalCosts = round(total_costs, 2),\r\n      TotalAmountSecured = total_amount_secured,\r\n      AmountSecuredPerHour = round(amount_secured_per_hour, 2),\r\n      ROIPercent = round(roi_percentage, 2),\r\n      CostBenefitRatio = round(cost_benefit_ratio, 2),\r\n      stringsAsFactors = FALSE\r\n    )\r\n  })\r\n  \r\n  # Render the results table\r\n  output$results_table <- renderDT({\r\n    datatable(results(), options = list(pageLength = 5))\r\n  })\r\n  \r\n  # Render the amount per hour plot using Plotly\r\n  output$amount_per_hour_plot <- renderPlotly({\r\n    df <- results()\r\n    req(nrow(df) > 0)  # Ensure df has data\r\n    p <- ggplot(df, aes(x = Category, y = AmountSecuredPerHour, fill = Category)) +\r\n      geom_bar(stat = \"identity\") +\r\n      labs(title = \"Amount Secured per Hour by Grant Category\",\r\n           x = \"Grant Category\",\r\n           y = \"Amount Secured per Hour (£/hour)\") +\r\n      theme_minimal()\r\n    ggplotly(p)\r\n  })\r\n  \r\n  # Render the ROI percentage plot using Plotly\r\n  output$roi_plot <- renderPlotly({\r\n    df <- results()\r\n    req(nrow(df) > 0)\r\n    p <- ggplot(df, aes(x = Category, y = ROIPercent, fill = Category)) +\r\n      geom_bar(stat = \"identity\") +\r\n      labs(title = \"ROI Percentage by Grant Category\",\r\n           x = \"Grant Category\",\r\n           y = \"ROI (%)\") +\r\n      theme_minimal()\r\n    ggplotly(p)\r\n  })\r\n  \r\n  # Render the cost-benefit ratio plot using Plotly\r\n  output$cost_benefit_plot <- renderPlotly({\r\n    df <- results()\r\n    req(nrow(df) > 0)\r\n    p <- ggplot(df, aes(x = Category, y = CostBenefitRatio, fill = Category)) +\r\n      geom_bar(stat = \"identity\") +\r\n      labs(title = \"Cost-Benefit Ratio by Grant Category\",\r\n           x = \"Grant Category\",\r\n           y = \"Cost-Benefit Ratio\") +\r\n      theme_minimal()\r\n    ggplotly(p)\r\n  })\r\n  \r\n  # Render the historical comparison plot\r\n  output$historical_plot <- renderPlotly({\r\n    df_current <- results()\r\n    req(nrow(df_current) > 0)\r\n    df_historical <- subset(historical_data, Year == input$select_year)\r\n    \r\n    # Merge current and historical data\r\n    df_merged <- merge(df_current[, c(\"Category\", \"TotalAmountSecured\")],\r\n                       df_historical[, c(\"Category\", \"TotalAmountSecured\")],\r\n                       by = \"Category\", suffixes = c(\"_Current\", \"_Historical\"))\r\n    \r\n    # Reshape data to long format\r\n    df_long <- reshape2::melt(df_merged, id.vars = \"Category\",\r\n                              measure.vars = c(\"TotalAmountSecured_Current\", \"TotalAmountSecured_Historical\"),\r\n                              variable.name = \"Scenario\", value.name = \"TotalAmountSecured\")\r\n    \r\n    # Modify Scenario names\r\n    df_long$Scenario <- gsub(\"TotalAmountSecured_\", \"\", df_long$Scenario)\r\n    df_long$Scenario[df_long$Scenario == \"Current\"] <- \"Current Scenario\"\r\n    df_long$Scenario[df_long$Scenario == \"Historical\"] <- input$select_year\r\n    \r\n    p <- ggplot(df_long, aes(x = Category, y = TotalAmountSecured, fill = Scenario)) +\r\n      geom_bar(stat = \"identity\", position = \"dodge\") +\r\n      labs(title = \"Total Amount Secured: Current vs Historical\",\r\n           x = \"Grant Category\",\r\n           y = \"Total Amount Secured (£)\") +\r\n      theme_minimal()\r\n    ggplotly(p)\r\n  })\r\n  \r\n  # Calculate and render total amount secured\r\n  output$total_amount_secured <- renderText({\r\n    df <- results()\r\n    total_amount <- sum(df$TotalAmountSecured)\r\n    paste0(\"£\", format(round(total_amount, 2), big.mark = \",\"))\r\n  })\r\n  \r\n  # Calculate and render total costs\r\n  output$total_costs <- renderText({\r\n    df <- results()\r\n    total_costs <- sum(df$TotalCosts)\r\n    paste0(\"£\", format(round(total_costs, 2), big.mark = \",\"))\r\n  })\r\n  \r\n  # Calculate and render total hours invested\r\n  output$total_hours_invested <- renderText({\r\n    df <- results()\r\n    total_hours <- sum(df$TotalHoursInvested)\r\n    format(round(total_hours, 2), big.mark = \",\")\r\n  })\r\n  \r\n  # Calculate and render overall amount secured per hour\r\n  output$overall_amount_per_hour <- renderText({\r\n    df <- results()\r\n    total_amount <- sum(df$TotalAmountSecured)\r\n    total_hours <- sum(df$TotalHoursInvested)\r\n    overall_amount_per_hour <- ifelse(total_hours > 0, total_amount / total_hours, 0)\r\n    paste0(\"£\", format(round(overall_amount_per_hour, 2), big.mark = \",\"))\r\n  })\r\n  \r\n  # Calculate and render overall ROI percentage\r\n  output$overall_roi <- renderText({\r\n    df <- results()\r\n    total_amount <- sum(df$TotalAmountSecured)\r\n    total_costs <- sum(df$TotalCosts)\r\n    overall_roi <- ifelse(total_costs > 0, ((total_amount - total_costs) / total_costs) * 100, 0)\r\n    paste0(round(overall_roi, 2), \"%\")\r\n  })\r\n  \r\n  # Calculate and render overall cost-benefit ratio\r\n  output$overall_cost_benefit <- renderText({\r\n    df <- results()\r\n    total_amount <- sum(df$TotalAmountSecured)\r\n    total_costs <- sum(df$TotalCosts)\r\n    overall_cbr <- ifelse(total_costs > 0, total_amount / total_costs, 0)\r\n    round(overall_cbr, 2)\r\n  })\r\n  \r\n  # Download results table\r\n  output$download_data <- downloadHandler(\r\n    filename = function() {\r\n      paste(\"results_table_\", Sys.Date(), \".csv\", sep = \"\")\r\n    },\r\n    content = function(file) {\r\n      write.csv(results(), file, row.names = FALSE)\r\n    }\r\n  )\r\n  \r\n  # Download plots as a zip file\r\n  output$download_plot <- downloadHandler(\r\n    filename = function() {\r\n      paste(\"plots_\", Sys.Date(), \".zip\", sep = \"\")\r\n    },\r\n    content = function(file) {\r\n      tmpdir <- tempdir()\r\n      \r\n      # Save plots\r\n      plots <- list(\r\n        amount_per_hour = ggplot(results(), aes(x = Category, y = AmountSecuredPerHour, fill = Category)) +\r\n          geom_bar(stat = \"identity\") +\r\n          labs(title = \"Amount Secured per Hour by Grant Category\",\r\n               x = \"Grant Category\",\r\n               y = \"Amount Secured per Hour (£/hour)\") +\r\n          theme_minimal(),\r\n        roi_percentage = ggplot(results(), aes(x = Category, y = ROIPercent, fill = Category)) +\r\n          geom_bar(stat = \"identity\") +\r\n          labs(title = \"ROI Percentage by Grant Category\",\r\n               x = \"Grant Category\",\r\n               y = \"ROI (%)\") +\r\n          theme_minimal(),\r\n        cost_benefit_ratio = ggplot(results(), aes(x = Category, y = CostBenefitRatio, fill = Category)) +\r\n          geom_bar(stat = \"identity\") +\r\n          labs(title = \"Cost-Benefit Ratio by Grant Category\",\r\n               x = \"Grant Category\",\r\n               y = \"Cost-Benefit Ratio\") +\r\n          theme_minimal()\r\n      )\r\n      \r\n      # Create filenames for the plots\r\n      plot_files <- file.path(tmpdir, paste0(names(plots), \".png\"))\r\n      \r\n      # Save each plot as a PNG file\r\n      for (i in seq_along(plots)) {\r\n        ggsave(filename = plot_files[i], plot = plots[[i]], width = 8, height = 6)\r\n      }\r\n      \r\n      # Zip the files\r\n      zip::zipr(zipfile = file, files = plot_files)\r\n    },\r\n    contentType = \"application/zip\"\r\n  )\r\n}\r\n\r\n# Run the application\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
